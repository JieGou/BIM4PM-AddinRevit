 #region Retrieve all family instances of specific named family and type
    /// <summary>
    /// Get instances by family name then type name
    /// </summary>
    static IEnumerable<FamilyInstance>
      GetFamilyInstancesByFamilyAndType(
        Document doc,
        string familyName,
        string typeName )
    {
      return new FilteredElementCollector( doc )
        .OfClass( typeof( FamilyInstance ) )
        .Cast<FamilyInstance>()
        .Where( x => x.Symbol.Family.Name.Equals( familyName ) ) // family
        .Where( x => x.Symbol.Name.Equals( typeName ) ); // family type               
    }

    /// <summary>
    /// Get instances by element type
    /// </summary>
    static IEnumerable<Element> GetInstancesOfElementType(
      ElementType type )
    {
      int iid = type.Id.IntegerValue;
      return new FilteredElementCollector( type.Document )
        .WhereElementIsNotElementType()
        //.OfClass( typeof( FamilyInstance ) ) // excludes walls, floors, pipes, etc.; all system family elements
        .Where( e => e.GetTypeId().IntegerValue.Equals(
          iid ) );
    }
    #endregion // Retrieve all family instances of specific named family and type