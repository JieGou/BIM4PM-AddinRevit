  /// <summary>
  /// Collect all categories of all visible
  /// elements in a given set of views.
  /// </summary>
  class CategoryCollector : Dictionary<Category, int>
  {
    /// <summary>
    /// Number of view selected.
    /// </summary>
    int _nViews;
 
    /// <summary>
    /// Number of elements in all selected views 
    /// including repetitions.
    /// </summary>
    int _nElements;
 
    /// <summary>
    /// Number of elements whose category have 
    /// material quantities in all selected views
    /// including repetitions.
    /// </summary>
    int _nElementsWithCategorMaterialQuantities;
 
    public CategoryCollector( IList<ViewPlan> views )
      : base( new CategoryEqualityComparer() )
    {
      _nViews = views.Count;
      _nElements = 0;
      _nElementsWithCategorMaterialQuantities = 0;
 
      if( 0 < _nViews )
      {
        Document doc = views[0].Document;
 
        FilteredElementCollector a;
 
        foreach( View v in views )
        {
          a = new FilteredElementCollector( doc, v.Id )
            .WhereElementIsViewIndependent();
 
          foreach( Element e in a )
          {
            ++_nElements;
 
            Category cat = e.Category;
 
            if( null != cat
              && cat.HasMaterialQuantities )
            {
              ++_nElementsWithCategorMaterialQuantities;
 
              if( !ContainsKey( cat ) )
              {
                Add( cat, 0 );
              }
              ++this[cat];
            }
          }
        }
      }
      Debug.Print( "Selected {0} categor{1} from "
        + "{2} view{3} displaying {4} element{5}, "
        + "{6} with HasMaterialQuantities=true",
        Count, Util.PluralSuffixY( Count ),
        _nViews, Util.PluralSuffix( _nViews ),
        _nElements, Util.PluralSuffix( _nElements ),
        _nElementsWithCategorMaterialQuantities );
    }
  }




/// <summary>
  /// Categories with the same element id equate to
  /// the same category. Without this, many, many,
  /// many duplicates.
  /// </summary>
  class CategoryEqualityComparer
    : IEqualityComparer<Category>
  {
    public bool Equals( Category x, Category y )
    {
      return x.Id.IntegerValue.Equals(
        y.Id.IntegerValue );
    }
 
    public int GetHashCode( Category obj )
    {
      return obj.Id.IntegerValue.GetHashCode();
    }
  }